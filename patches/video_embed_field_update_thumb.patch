diff --git a/modules/video_embed_media/src/Plugin/MediaEntity/Type/VideoEmbedField.php b/modules/video_embed_media/src/Plugin/MediaEntity/Type/VideoEmbedField.php
index deeae3ecc..37b4d32d2 100644
--- a/modules/video_embed_media/src/Plugin/MediaEntity/Type/VideoEmbedField.php
+++ b/modules/video_embed_media/src/Plugin/MediaEntity/Type/VideoEmbedField.php
@@ -219,6 +219,36 @@ public static function createVideoEmbedField($media_bundle_id) {
   /**
    * {@inheritdoc}
    */
+  public function shouldUpdateThumbnail(MediaInterface $media, MediaInterface $originalMedia = NULL) {
+    // If there is no original media entity, then entity is new and thumbnail
+    // should be created.
+    return true;
+
+//    if ($originalMedia === NULL) {
+//      return TRUE;
+//    }
+//    // If source field is changed, then also thumbnail should be changed.
+//    $source_field = $this->configuration['source_field'];
+//
+//    /** @var \Drupal\file\FileInterface $file */
+//    $file = $media->{$source_field}->entity;
+//
+//    /** @var \Drupal\file\FileInterface $previousFile */
+//    $previousFile = $originalMedia->{$source_field}->entity;
+//
+//    // Xor covers case when source field is deleted (emptied) and when it's
+//    // filled from previously empty field. That means switching between default
+//    // icon and thumbnail created from image file.
+//    if (($file xor $previousFile) || ($file && $previousFile && $file->getFileUri() !== $previousFile->getFileUri())) {
+//      return TRUE;
+//    }
+
+//    return parent::shouldUpdateThumbnail($media, $originalMedia);
+  }
+
+  /**
+   * {@inheritdoc}
+   */
   public function getDefaultThumbnail() {
     return $this->mediaSettings->get('icon_base') . '/video.png';
   }
diff --git a/src/ProviderPluginBase.php b/src/ProviderPluginBase.php
index aeb82a5f9..95ed7bd45 100644
--- a/src/ProviderPluginBase.php
+++ b/src/ProviderPluginBase.php
@@ -121,14 +121,24 @@ public function renderThumbnail($image_style, $link_url) {
    */
   public function downloadThumbnail() {
     $local_uri = $this->getLocalThumbnailUri();
-    if (!file_exists($local_uri)) {
-      file_prepare_directory($this->thumbsDirectory, FILE_CREATE_DIRECTORY);
-      try {
-        $thumbnail = $this->httpClient->request('GET', $this->getRemoteThumbnailUrl());
-        file_unmanaged_save_data((string) $thumbnail->getBody(), $local_uri);
-      }
-      catch (\Exception $e) {
+    file_prepare_directory($this->thumbsDirectory, FILE_CREATE_DIRECTORY);
+    try {
+      // If file exists, delete the current item
+      if (file_exists($local_uri)) {
+        $existing = \Drupal::entityQuery('file')
+          ->condition('uri', $local_uri)
+          ->execute();
+        $existing_id = array_values($existing)[0]; ;
+
+        $file_manager = \Drupal::entityTypeManager()->getStorage('file');
+        $existing_thumb = $file_manager->load($existing_id);
+        $file_manager->delete([$existing_thumb]);
       }
+      // Get the file, and if file exists in files replace the file (file is always named by ID, so we need to replace)
+      $thumbnail = $this->httpClient->request('GET', $this->getRemoteThumbnailUrl());
+      file_unmanaged_save_data((string) $thumbnail->getBody(), $local_uri, FILE_EXISTS_REPLACE);
+    }
+    catch (\Exception $e) {
     }
   }
 
