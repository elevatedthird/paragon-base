<?php

declare(strict_types=1);

namespace Drupal\gin_lb\TwigExtension;

use Drupal\Component\Serialization\Json;
use Drupal\Core\Template\Attribute;
use Twig\Extension\AbstractExtension;
use Twig\TwigFunction;

/**
 * A class providing Gin Twig function.
 */
class GinLbExtension extends AbstractExtension {

  /**
   * The list of Gin LB classes.
   *
   * @var array
   */
  protected array $ginLbClasses = [];

  /**
   * {@inheritdoc}
   */
  public function getFunctions() {
    return [
      new TwigFunction('glb_classes', [$this, 'ginClasses']),
    ];
  }

  /**
   * {@inheritdoc}
   */
  public function getName(): string {
    return 'gin_lb';
  }

  /**
   * Returns a list of all glb- prefixed classes.
   *
   * The classes are generated by a postcss plugin.
   *
   * @return array
   *   The classes
   */
  protected function getGinLbClasses(): array {
    if (empty($this->ginLbClasses)) {
      $classes = \file_get_contents(__DIR__ . '/../classes.json');
      if ($classes) {
        $decoded_classes = Json::decode($classes);
        if (\is_array($decoded_classes)) {
          $this->ginLbClasses = $decoded_classes;
        }
      }
    }
    return $this->ginLbClasses;
  }

  /**
   * Replaces all theme classes with gin classes.
   *
   * @param \Drupal\Core\Template\Attribute $attribute
   *   Twig attributes.
   *
   * @return \Drupal\Core\Template\Attribute
   *   The replaced attributes.
   */
  public function ginClasses(Attribute $attribute): Attribute {
    $gin_lb_classes = $this->getGinLbClasses();
    if ($attribute->getClass() == NULL) {
      return $attribute;
    }
    $renamed_classes = [];

    // These classes need to be kept for script purposes.
    // If this class has been styled, then we'll keep both classes: the original
    // and the custom glb one.
    $script_classes = [
      'form-autocomplete',
    ];

    /** @var \Drupal\Core\Template\AttributeArray $attribute_classes */
    $attribute_classes = $attribute->getClass();
    /** @var string $class_string */
    foreach ($attribute_classes as $class_string) {
      // $attribute->getClass returns multiple classes as one class.
      // To prefix this classes - explode it.
      $classes = \explode(' ', $class_string);
      foreach ($classes as $class) {
        if (\in_array('glb-' . $class, $gin_lb_classes, TRUE)) {
          $renamed_classes[] = 'glb-' . $class;
          if (\in_array($class, $script_classes, TRUE)) {
            $renamed_classes[] = $class;
          }
        }
        else {
          $renamed_classes[] = $class;
        }
      }
    }
    $attribute->setAttribute('class', $renamed_classes);
    return $attribute;
  }

}
